plugins {
    id 'com.android.library' version '8.2.2'
    id 'org.jetbrains.kotlin.android' version '1.9.23'
    id 'maven-publish'
    id 'signing'
}

repositories {
    google()
    mavenCentral()
}

allprojects {
    repositories {
        google()
        mavenCentral()
    }
}

android {
    namespace = "dev.myallworks.native_orm_db"
    compileSdk = 34

    defaultConfig {
        minSdk = 24
        targetSdk = 34

        consumerProguardFiles "consumer-rules.pro"
        testInstrumentationRunner = "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled = false
            proguardFiles getDefaultProguardFile("proguard-android-optimize.txt"), "proguard-rules.pro"
        }
    }

    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_17
        targetCompatibility = JavaVersion.VERSION_17
    }

    kotlinOptions {
        jvmTarget = "17"
    }

    publishing {
        singleVariant("release") {
            withSourcesJar()
            withJavadocJar()
        }
    }

    // Ensure Javadoc generation doesn't fail
    tasks.withType(Javadoc).configureEach {
        enabled = false // Disable javadoc for Android libraries as it often fails
    }
}

dependencies {
    implementation "androidx.core:core-ktx:1.12.0"
    implementation "androidx.appcompat:appcompat:1.6.1"
    implementation "com.google.android.material:material:1.11.0"

    testImplementation "junit:junit:4.13.2"
    androidTestImplementation "androidx.test.ext:junit:1.1.5"
    androidTestImplementation "androidx.test.espresso:espresso-core:3.5.1"
}

// Define your library version
ext.PUBLISH_GROUP_ID = 'io.github.dnomahesh'
ext.PUBLISH_ARTIFACT_ID = 'native-orm-db'
ext.PUBLISH_VERSION = '1.0.0'

// Alternative manual configuration (fallback if vanniktech plugin doesn't work)
afterEvaluate {
    publishing {
        publications {
            release(MavenPublication) {
                from components.release

                groupId PUBLISH_GROUP_ID
                artifactId PUBLISH_ARTIFACT_ID
                version PUBLISH_VERSION

                pom {
                    name = "Native ORM DB"
                    description = "A lightweight ORM alternative to LitePal for Android development"
                    url = "https://github.com/dnomahesh/native_orm_db"

                    licenses {
                        license {
                            name = "The Apache License, Version 2.0"
                            url = "http://www.apache.org/licenses/LICENSE-2.0.txt"
                        }
                    }

                    developers {
                        developer {
                            id = "dnomahesh"
                            name = "Mahesh Tripathi"
                            email = "maheshtripathijobs247@gmail.com"
                        }
                    }

                    scm {
                        connection = "scm:git:git://github.com/dnomahesh/native_orm_db.git"
                        developerConnection = "scm:git:ssh://git@github.com/dnomahesh/native_orm_db.git"
                        url = "https://github.com/dnomahesh/native_orm_db/tree/main"
                    }
                }
            }
        }

        repositories {
            maven {
                name = "CentralPortal"
                url = "https://central.sonatype.com/api/v1/publisher/upload"
                credentials {
                    username = project.findProperty("mavenCentralUsername") ?: System.getenv("CENTRAL_PORTAL_USERNAME")
                    password = project.findProperty("mavenCentralPassword") ?: System.getenv("CENTRAL_PORTAL_PASSWORD")
                }
            }
        }
    }
}

// Enhanced signing configuration for better compatibility
signing {
    required { gradle.taskGraph.hasTask("publish") }

    def signingKeyId = project.findProperty("signingKeyId") ?: System.getenv("SIGNING_KEY_ID")
    def signingKey = project.findProperty("signingKey") ?: System.getenv("SIGNING_KEY")
    def signingPassword = project.findProperty("signingPassword") ?: System.getenv("SIGNING_PASSWORD")

    if (signingKeyId && signingKey && signingPassword) {
        useInMemoryPgpKeys(signingKeyId, signingKey, signingPassword)
        sign publishing.publications
    } else if (signingKey && signingPassword) {
        // Fallback to key without ID
        useInMemoryPgpKeys(signingKey, signingPassword)
        sign publishing.publications
    }
}