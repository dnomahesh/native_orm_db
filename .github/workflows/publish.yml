name: Publish to Maven Central

on:
  release:
    types: [published]
  workflow_dispatch:

jobs:
  publish:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'
          cache: 'gradle'

      - name: Setup GPG
        run: |
          # Kill any existing gpg-agent processes
          pkill gpg-agent || true
          
          # Create GPG configuration directory
          mkdir -p ~/.gnupg
          chmod 700 ~/.gnupg
          
          # Configure GPG for batch mode
          cat > ~/.gnupg/gpg.conf << EOF
          use-agent
          pinentry-mode loopback
          batch
          yes
          no-tty
          EOF
          
          cat > ~/.gnupg/gpg-agent.conf << EOF
          allow-loopback-pinentry
          pinentry-program /usr/bin/pinentry-curses
          default-cache-ttl 600
          max-cache-ttl 7200
          EOF
          
          # Start fresh GPG agent
          gpg-agent --daemon --allow-loopback-pinentry --default-cache-ttl 600 --max-cache-ttl 7200

      - name: Import GPG key
        run: |
          # Import the GPG private key in batch mode
          echo "$SIGNING_KEY" | base64 --decode | gpg --batch --import --no-tty --pinentry-mode loopback
          
          # Get the key ID (short format for signing)
          KEY_ID=$(gpg --list-secret-keys --keyid-format short --with-colons | grep '^sec' | cut -d: -f5 | head -1)
          
          if [[ -z "$KEY_ID" ]]; then
            echo "Error: Could not extract GPG key ID"
            gpg --list-secret-keys
            exit 1
          fi
          
          echo "SIGNING_KEY_ID=$KEY_ID" >> $GITHUB_ENV
          echo "Using GPG Key ID: $KEY_ID"
          
          # Verify key is available for signing
          gpg --list-secret-keys --keyid-format short
        env:
          SIGNING_KEY: ${{ secrets.SIGNING_KEY }}

      - name: Grant execute permission for Gradle
        run: chmod +x ./gradlew

      - name: Validate Gradle wrapper
        uses: gradle/wrapper-validation-action@v2

      - name: Build and Test
        run: ./gradlew clean build test --no-daemon --stacktrace

      - name: Publish to Maven Central Portal
        run: |
          ./gradlew publishReleasePublicationToCentralPortalRepository \
            --no-daemon \
            --no-parallel \
            --stacktrace \
            --info
        env:
          CENTRAL_PORTAL_USERNAME: ${{ secrets.CENTRAL_PORTAL_USERNAME }}
          CENTRAL_PORTAL_PASSWORD: ${{ secrets.CENTRAL_PORTAL_PASSWORD }}
          SIGNING_KEY_ID: ${{ env.SIGNING_KEY_ID }}
          SIGNING_KEY: ${{ secrets.SIGNING_KEY }}
          SIGNING_PASSWORD: ${{ secrets.SIGNING_PASSWORD }}

      # Clean up GPG keys for security
      - name: Clean GPG Key
        if: always()
        run: |
          pkill gpg-agent || true
          rm -rf ~/.gnupg